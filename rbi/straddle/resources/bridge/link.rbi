# typed: strong

module Straddle
  module Resources
    class Bridge
      class Link
        # Use Bridge to create a new paykey using a bank routing and account number as the
        # source. This endpoint allows you to create a secure payment token linked to a
        # specific bank account.
        sig do
          params(
            account_number: String,
            account_type:
              Straddle::Bridge::LinkBankAccountParams::AccountType::OrSymbol,
            customer_id: String,
            routing_number: String,
            config: Straddle::Bridge::LinkBankAccountParams::Config::OrHash,
            metadata: T.nilable(T::Hash[Symbol, String]),
            correlation_id: String,
            idempotency_key: String,
            request_id: String,
            straddle_account_id: String,
            request_options: Straddle::RequestOptions::OrHash
          ).returns(Straddle::PaykeyV1)
        end
        def bank_account(
          # Body param: The bank account number.
          account_number:,
          # Body param:
          account_type:,
          # Body param: Unique identifier of the related customer object.
          customer_id:,
          # Body param: The routing number of the bank account.
          routing_number:,
          # Body param:
          config: nil,
          # Body param: Up to 20 additional user-defined key-value pairs. Useful for storing
          # additional information about the paykey in a structured format.
          metadata: nil,
          # Header param: Optional client generated identifier to trace and debug a series
          # of requests.
          correlation_id: nil,
          # Header param: Optional client generated value to use for idempotent requests.
          idempotency_key: nil,
          # Header param: Optional client generated identifier to trace and debug a request.
          request_id: nil,
          # Header param: For use by platforms to specify an account id and set scope of a
          # request.
          straddle_account_id: nil,
          request_options: {}
        )
        end

        # Creates a new paykey using a Quiltt token as the source. This endpoint allows
        # you to create a secure payment token linked to a bank account authenticated
        # through Quiltt.
        sig do
          params(
            customer_id: String,
            quiltt_token: String,
            config: Straddle::Bridge::LinkCreatePaykeyParams::Config::OrHash,
            metadata: T.nilable(T::Hash[Symbol, String]),
            correlation_id: String,
            idempotency_key: String,
            request_id: String,
            straddle_account_id: String,
            request_options: Straddle::RequestOptions::OrHash
          ).returns(Straddle::Models::Bridge::LinkCreatePaykeyResponse)
        end
        def create_paykey(
          # Body param: Unique identifier of the related customer object.
          customer_id:,
          # Body param: Quiltt processor token generated by your application for use with
          # the Straddle API.
          quiltt_token:,
          # Body param:
          config: nil,
          # Body param: Up to 20 additional user-defined key-value pairs. Useful for storing
          # additional information about the paykey in a structured format.
          metadata: nil,
          # Header param: Optional client generated identifier to trace and debug a series
          # of requests.
          correlation_id: nil,
          # Header param: Optional client generated value to use for idempotent requests.
          idempotency_key: nil,
          # Header param: Optional client generated identifier to trace and debug a request.
          request_id: nil,
          # Header param: For use by platforms to specify an account id and set scope of a
          # request.
          straddle_account_id: nil,
          request_options: {}
        )
        end

        sig do
          params(
            account_type:
              Straddle::Bridge::LinkCreateTanParams::AccountType::OrSymbol,
            customer_id: String,
            routing_number: String,
            tan: String,
            config: Straddle::Bridge::LinkCreateTanParams::Config::OrHash,
            metadata: T.nilable(T::Hash[Symbol, String]),
            correlation_id: String,
            idempotency_key: String,
            request_id: String,
            straddle_account_id: String,
            request_options: Straddle::RequestOptions::OrHash
          ).returns(Straddle::Models::Bridge::LinkCreateTanResponse)
        end
        def create_tan(
          # Body param:
          account_type:,
          # Body param: Unique identifier of the related customer object.
          customer_id:,
          # Body param: Bank routing number.
          routing_number:,
          # Body param: Tokenized account number.
          tan:,
          # Body param:
          config: nil,
          # Body param: Up to 20 additional user-defined key-value pairs. Useful for storing
          # additional information about the paykey in a structured format.
          metadata: nil,
          # Header param: Optional client generated identifier to trace and debug a series
          # of requests.
          correlation_id: nil,
          # Header param: Optional client generated value to use for idempotent requests.
          idempotency_key: nil,
          # Header param: Optional client generated identifier to trace and debug a request.
          request_id: nil,
          # Header param: For use by platforms to specify an account id and set scope of a
          # request.
          straddle_account_id: nil,
          request_options: {}
        )
        end

        # Use Bridge to create a new paykey using a Plaid token as the source. This
        # endpoint allows you to create a secure payment token linked to a bank account
        # authenticated through Plaid.
        sig do
          params(
            customer_id: String,
            plaid_token: String,
            config: Straddle::Bridge::LinkPlaidParams::Config::OrHash,
            metadata: T.nilable(T::Hash[Symbol, String]),
            correlation_id: String,
            idempotency_key: String,
            request_id: String,
            straddle_account_id: String,
            request_options: Straddle::RequestOptions::OrHash
          ).returns(Straddle::PaykeyV1)
        end
        def plaid(
          # Body param: Unique identifier of the related customer object.
          customer_id:,
          # Body param: Plaid processor token generated by your application for use with the
          # Straddle API.
          plaid_token:,
          # Body param:
          config: nil,
          # Body param: Up to 20 additional user-defined key-value pairs. Useful for storing
          # additional information about the paykey in a structured format.
          metadata: nil,
          # Header param: Optional client generated identifier to trace and debug a series
          # of requests.
          correlation_id: nil,
          # Header param: Optional client generated value to use for idempotent requests.
          idempotency_key: nil,
          # Header param: Optional client generated identifier to trace and debug a request.
          request_id: nil,
          # Header param: For use by platforms to specify an account id and set scope of a
          # request.
          straddle_account_id: nil,
          request_options: {}
        )
        end

        # @api private
        sig { params(client: Straddle::Client).returns(T.attached_class) }
        def self.new(client:)
        end
      end
    end
  end
end
