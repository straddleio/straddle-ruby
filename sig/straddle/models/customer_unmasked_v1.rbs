module Straddle
  module Models
    type customer_unmasked_v1 =
      {
        data: Straddle::CustomerUnmaskedV1::Data,
        meta: Straddle::ResponseMetadata,
        response_type: Straddle::Models::CustomerUnmaskedV1::response_type
      }

    class CustomerUnmaskedV1 < Straddle::Internal::Type::BaseModel
      attr_accessor data: Straddle::CustomerUnmaskedV1::Data

      attr_accessor meta: Straddle::ResponseMetadata

      attr_accessor response_type: Straddle::Models::CustomerUnmaskedV1::response_type

      def initialize: (
        data: Straddle::CustomerUnmaskedV1::Data,
        meta: Straddle::ResponseMetadata,
        response_type: Straddle::Models::CustomerUnmaskedV1::response_type
      ) -> void

      def to_hash: -> {
        data: Straddle::CustomerUnmaskedV1::Data,
        meta: Straddle::ResponseMetadata,
        response_type: Straddle::Models::CustomerUnmaskedV1::response_type
      }

      type data =
        {
          id: String,
          created_at: Time,
          email: String,
          name: String,
          phone: String,
          status: Straddle::Models::CustomerUnmaskedV1::Data::status,
          type: Straddle::Models::CustomerUnmaskedV1::Data::type_,
          updated_at: Time,
          address: Straddle::CustomerAddressV1?,
          compliance_profile: Straddle::Models::CustomerUnmaskedV1::Data::compliance_profile?,
          config: Straddle::CustomerUnmaskedV1::Data::Config,
          device: Straddle::DeviceUnmaskedV1,
          external_id: String?,
          metadata: ::Hash[Symbol, String]?
        }

      class Data < Straddle::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Time

        attr_accessor email: String

        attr_accessor name: String

        attr_accessor phone: String

        attr_accessor status: Straddle::Models::CustomerUnmaskedV1::Data::status

        attr_accessor type: Straddle::Models::CustomerUnmaskedV1::Data::type_

        attr_accessor updated_at: Time

        attr_accessor address: Straddle::CustomerAddressV1?

        attr_accessor compliance_profile: Straddle::Models::CustomerUnmaskedV1::Data::compliance_profile?

        attr_reader config: Straddle::CustomerUnmaskedV1::Data::Config?

        def config=: (
          Straddle::CustomerUnmaskedV1::Data::Config
        ) -> Straddle::CustomerUnmaskedV1::Data::Config

        attr_reader device: Straddle::DeviceUnmaskedV1?

        def device=: (Straddle::DeviceUnmaskedV1) -> Straddle::DeviceUnmaskedV1

        attr_accessor external_id: String?

        attr_accessor metadata: ::Hash[Symbol, String]?

        def initialize: (
          id: String,
          created_at: Time,
          email: String,
          name: String,
          phone: String,
          status: Straddle::Models::CustomerUnmaskedV1::Data::status,
          type: Straddle::Models::CustomerUnmaskedV1::Data::type_,
          updated_at: Time,
          ?address: Straddle::CustomerAddressV1?,
          ?compliance_profile: Straddle::Models::CustomerUnmaskedV1::Data::compliance_profile?,
          ?config: Straddle::CustomerUnmaskedV1::Data::Config,
          ?device: Straddle::DeviceUnmaskedV1,
          ?external_id: String?,
          ?metadata: ::Hash[Symbol, String]?
        ) -> void

        def to_hash: -> {
          id: String,
          created_at: Time,
          email: String,
          name: String,
          phone: String,
          status: Straddle::Models::CustomerUnmaskedV1::Data::status,
          type: Straddle::Models::CustomerUnmaskedV1::Data::type_,
          updated_at: Time,
          address: Straddle::CustomerAddressV1?,
          compliance_profile: Straddle::Models::CustomerUnmaskedV1::Data::compliance_profile?,
          config: Straddle::CustomerUnmaskedV1::Data::Config,
          device: Straddle::DeviceUnmaskedV1,
          external_id: String?,
          metadata: ::Hash[Symbol, String]?
        }

        type status = :pending | :review | :verified | :inactive | :rejected

        module Status
          extend Straddle::Internal::Type::Enum

          PENDING: :pending
          REVIEW: :review
          VERIFIED: :verified
          INACTIVE: :inactive
          REJECTED: :rejected

          def self?.values: -> ::Array[Straddle::Models::CustomerUnmaskedV1::Data::status]
        end

        type type_ = :individual | :business | :unknown

        module Type
          extend Straddle::Internal::Type::Enum

          INDIVIDUAL: :individual
          BUSINESS: :business
          UNKNOWN: :unknown

          def self?.values: -> ::Array[Straddle::Models::CustomerUnmaskedV1::Data::type_]
        end

        type compliance_profile =
          Straddle::CustomerUnmaskedV1::Data::ComplianceProfile::IndividualComplianceProfile
          | Straddle::CustomerUnmaskedV1::Data::ComplianceProfile::BusinessComplianceProfile

        module ComplianceProfile
          extend Straddle::Internal::Type::Union

          type individual_compliance_profile = { dob: Date?, ssn: String? }

          class IndividualComplianceProfile < Straddle::Internal::Type::BaseModel
            attr_accessor dob: Date?

            attr_accessor ssn: String?

            def initialize: (dob: Date?, ssn: String?) -> void

            def to_hash: -> { dob: Date?, ssn: String? }
          end

          type business_compliance_profile =
            {
              ein: String?,
              legal_business_name: String?,
              representatives: ::Array[Straddle::CustomerUnmaskedV1::Data::ComplianceProfile::BusinessComplianceProfile::Representative]?,
              website: String?
            }

          class BusinessComplianceProfile < Straddle::Internal::Type::BaseModel
            attr_accessor ein: String?

            attr_accessor legal_business_name: String?

            attr_accessor representatives: ::Array[Straddle::CustomerUnmaskedV1::Data::ComplianceProfile::BusinessComplianceProfile::Representative]?

            attr_accessor website: String?

            def initialize: (
              ein: String?,
              legal_business_name: String?,
              ?representatives: ::Array[Straddle::CustomerUnmaskedV1::Data::ComplianceProfile::BusinessComplianceProfile::Representative]?,
              ?website: String?
            ) -> void

            def to_hash: -> {
              ein: String?,
              legal_business_name: String?,
              representatives: ::Array[Straddle::CustomerUnmaskedV1::Data::ComplianceProfile::BusinessComplianceProfile::Representative]?,
              website: String?
            }

            type representative =
              { name: String, email: String?, phone: String? }

            class Representative < Straddle::Internal::Type::BaseModel
              attr_accessor name: String

              attr_accessor email: String?

              attr_accessor phone: String?

              def initialize: (
                name: String,
                ?email: String?,
                ?phone: String?
              ) -> void

              def to_hash: -> { name: String, email: String?, phone: String? }
            end
          end

          def self?.variants: -> ::Array[Straddle::Models::CustomerUnmaskedV1::Data::compliance_profile]
        end

        type config =
          {
            processing_method: Straddle::Models::CustomerUnmaskedV1::Data::Config::processing_method,
            sandbox_outcome: Straddle::Models::CustomerUnmaskedV1::Data::Config::sandbox_outcome
          }

        class Config < Straddle::Internal::Type::BaseModel
          attr_reader processing_method: Straddle::Models::CustomerUnmaskedV1::Data::Config::processing_method?

          def processing_method=: (
            Straddle::Models::CustomerUnmaskedV1::Data::Config::processing_method
          ) -> Straddle::Models::CustomerUnmaskedV1::Data::Config::processing_method

          attr_reader sandbox_outcome: Straddle::Models::CustomerUnmaskedV1::Data::Config::sandbox_outcome?

          def sandbox_outcome=: (
            Straddle::Models::CustomerUnmaskedV1::Data::Config::sandbox_outcome
          ) -> Straddle::Models::CustomerUnmaskedV1::Data::Config::sandbox_outcome

          def initialize: (
            ?processing_method: Straddle::Models::CustomerUnmaskedV1::Data::Config::processing_method,
            ?sandbox_outcome: Straddle::Models::CustomerUnmaskedV1::Data::Config::sandbox_outcome
          ) -> void

          def to_hash: -> {
            processing_method: Straddle::Models::CustomerUnmaskedV1::Data::Config::processing_method,
            sandbox_outcome: Straddle::Models::CustomerUnmaskedV1::Data::Config::sandbox_outcome
          }

          type processing_method = :inline | :background | :skip

          module ProcessingMethod
            extend Straddle::Internal::Type::Enum

            INLINE: :inline
            BACKGROUND: :background
            SKIP: :skip

            def self?.values: -> ::Array[Straddle::Models::CustomerUnmaskedV1::Data::Config::processing_method]
          end

          type sandbox_outcome = :standard | :verified | :rejected | :review

          module SandboxOutcome
            extend Straddle::Internal::Type::Enum

            STANDARD: :standard
            VERIFIED: :verified
            REJECTED: :rejected
            REVIEW: :review

            def self?.values: -> ::Array[Straddle::Models::CustomerUnmaskedV1::Data::Config::sandbox_outcome]
          end
        end
      end

      type response_type = :object | :array | :error | :none

      module ResponseType
        extend Straddle::Internal::Type::Enum

        OBJECT: :object
        ARRAY: :array
        ERROR: :error
        NONE: :none

        def self?.values: -> ::Array[Straddle::Models::CustomerUnmaskedV1::response_type]
      end
    end
  end
end
